// Generated by gencpp from file leap_motion_controller/Hand.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_CONTROLLER_MESSAGE_HAND_H
#define LEAP_MOTION_CONTROLLER_MESSAGE_HAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Vector3Stamped.h>

namespace leap_motion_controller
{
template <class ContainerAllocator>
struct Hand_
{
  typedef Hand_<ContainerAllocator> Type;

  Hand_()
    : is_present(false)
    , palm_pose()
    , palm_velocity()
    , sphere_radius(0.0)
    , pinch_strength(0.0)
    , key_tap(false)  {
    }
  Hand_(const ContainerAllocator& _alloc)
    : is_present(false)
    , palm_pose(_alloc)
    , palm_velocity(_alloc)
    , sphere_radius(0.0)
    , pinch_strength(0.0)
    , key_tap(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_present_type;
  _is_present_type is_present;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _palm_pose_type;
  _palm_pose_type palm_pose;

   typedef  ::geometry_msgs::Vector3Stamped_<ContainerAllocator>  _palm_velocity_type;
  _palm_velocity_type palm_velocity;

   typedef float _sphere_radius_type;
  _sphere_radius_type sphere_radius;

   typedef float _pinch_strength_type;
  _pinch_strength_type pinch_strength;

   typedef uint8_t _key_tap_type;
  _key_tap_type key_tap;





  typedef boost::shared_ptr< ::leap_motion_controller::Hand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion_controller::Hand_<ContainerAllocator> const> ConstPtr;

}; // struct Hand_

typedef ::leap_motion_controller::Hand_<std::allocator<void> > Hand;

typedef boost::shared_ptr< ::leap_motion_controller::Hand > HandPtr;
typedef boost::shared_ptr< ::leap_motion_controller::Hand const> HandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion_controller::Hand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion_controller::Hand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion_controller::Hand_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Hand_<ContainerAllocator2> & rhs)
{
  return lhs.is_present == rhs.is_present &&
    lhs.palm_pose == rhs.palm_pose &&
    lhs.palm_velocity == rhs.palm_velocity &&
    lhs.sphere_radius == rhs.sphere_radius &&
    lhs.pinch_strength == rhs.pinch_strength &&
    lhs.key_tap == rhs.key_tap;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion_controller::Hand_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Hand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Hand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Hand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Hand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Hand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Hand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion_controller::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51609a3515f052500f2602710bb2f7ae";
  }

  static const char* value(const ::leap_motion_controller::Hand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51609a3515f05250ULL;
  static const uint64_t static_value2 = 0x0f2602710bb2f7aeULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion_controller::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion_controller/Hand";
  }

  static const char* value(const ::leap_motion_controller::Hand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion_controller::Hand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# For position, Leap Motion Controller uses '_optical' axis orientation, i.e.:\n"
"#    z forward\n"
"#    x right\n"
"#    y down\n"
"\n"
"bool is_present					# TRUE if this hand is a valid hand (left or right), FALSE otherwise.\n"
"geometry_msgs/PoseStamped palm_pose		# Contains the center position of the palm in meters from the Leap Motion Controller origin and the quaternion orientation of the palm.\n"
"geometry_msgs/Vector3Stamped palm_velocity	# The rate of change of the palm position in meters per second. \n"
"float32 sphere_radius				# The radius of a sphere fit to the curvature of this hand. This sphere is placed roughly as if the hand were holding a ball. Thus the size of the sphere decreases as the fingers are curled into a fist.\n"
"float32 pinch_strength				# The strength is zero for an open hand, and blends to 1.0 when a pinching hand pose is recognized.\n"
"bool key_tap					# TRUE if KEY_TAP gesture has been detected on this hand, FALSE otherwise.\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3Stamped\n"
"# This represents a Vector3 with reference coordinate frame and timestamp\n"
"Header header\n"
"Vector3 vector\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::leap_motion_controller::Hand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion_controller::Hand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_present);
      stream.next(m.palm_pose);
      stream.next(m.palm_velocity);
      stream.next(m.sphere_radius);
      stream.next(m.pinch_strength);
      stream.next(m.key_tap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Hand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion_controller::Hand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion_controller::Hand_<ContainerAllocator>& v)
  {
    s << indent << "is_present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_present);
    s << indent << "palm_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.palm_pose);
    s << indent << "palm_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3Stamped_<ContainerAllocator> >::stream(s, indent + "  ", v.palm_velocity);
    s << indent << "sphere_radius: ";
    Printer<float>::stream(s, indent + "  ", v.sphere_radius);
    s << indent << "pinch_strength: ";
    Printer<float>::stream(s, indent + "  ", v.pinch_strength);
    s << indent << "key_tap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_tap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_CONTROLLER_MESSAGE_HAND_H
