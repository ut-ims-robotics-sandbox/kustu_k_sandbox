// Generated by gencpp from file leap_motion_controller/Finger.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_CONTROLLER_MESSAGE_FINGER_H
#define LEAP_MOTION_CONTROLLER_MESSAGE_FINGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace leap_motion_controller
{
template <class ContainerAllocator>
struct Finger_
{
  typedef Finger_<ContainerAllocator> Type;

  Finger_()
    : type(0)
    , joint_position()  {
    }
  Finger_(const ContainerAllocator& _alloc)
    : type(0)
    , joint_position(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _joint_position_type;
  _joint_position_type joint_position;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_THUMB)
  #undef TYPE_THUMB
#endif
#if defined(_WIN32) && defined(TYPE_INDEX)
  #undef TYPE_INDEX
#endif
#if defined(_WIN32) && defined(TYPE_MIDDLE)
  #undef TYPE_MIDDLE
#endif
#if defined(_WIN32) && defined(TYPE_RING)
  #undef TYPE_RING
#endif
#if defined(_WIN32) && defined(TYPE_PINKY)
  #undef TYPE_PINKY
#endif

  enum {
    TYPE_THUMB = 0u,
    TYPE_INDEX = 1u,
    TYPE_MIDDLE = 2u,
    TYPE_RING = 3u,
    TYPE_PINKY = 4u,
  };


  typedef boost::shared_ptr< ::leap_motion_controller::Finger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion_controller::Finger_<ContainerAllocator> const> ConstPtr;

}; // struct Finger_

typedef ::leap_motion_controller::Finger_<std::allocator<void> > Finger;

typedef boost::shared_ptr< ::leap_motion_controller::Finger > FingerPtr;
typedef boost::shared_ptr< ::leap_motion_controller::Finger const> FingerConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion_controller::Finger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion_controller::Finger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion_controller::Finger_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Finger_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.joint_position == rhs.joint_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion_controller::Finger_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Finger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Finger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Finger_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Finger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Finger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Finger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Finger_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion_controller::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "395c50f3dc2ad1331c9fa184599413c8";
  }

  static const char* value(const ::leap_motion_controller::Finger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x395c50f3dc2ad133ULL;
  static const uint64_t static_value2 = 0x1c9fa184599413c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion_controller::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion_controller/Finger";
  }

  static const char* value(const ::leap_motion_controller::Finger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion_controller::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 TYPE_THUMB = 0\n"
"uint8 TYPE_INDEX = 1\n"
"uint8 TYPE_MIDDLE = 2\n"
"uint8 TYPE_RING = 3\n"
"uint8 TYPE_PINKY = 4\n"
"\n"
"uint8 type\n"
"geometry_msgs/Point[] joint_position\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::leap_motion_controller::Finger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion_controller::Finger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.joint_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Finger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion_controller::Finger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion_controller::Finger_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "joint_position[]" << std::endl;
    for (size_t i = 0; i < v.joint_position.size(); ++i)
    {
      s << indent << "  joint_position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_CONTROLLER_MESSAGE_FINGER_H
