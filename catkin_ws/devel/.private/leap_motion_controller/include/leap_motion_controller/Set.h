// Generated by gencpp from file leap_motion_controller/Set.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_CONTROLLER_MESSAGE_SET_H
#define LEAP_MOTION_CONTROLLER_MESSAGE_SET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <leap_motion_controller/Hand.h>
#include <leap_motion_controller/Hand.h>

namespace leap_motion_controller
{
template <class ContainerAllocator>
struct Set_
{
  typedef Set_<ContainerAllocator> Type;

  Set_()
    : header()
    , left_hand()
    , right_hand()
    , extended_fingers(0)  {
    }
  Set_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , left_hand(_alloc)
    , right_hand(_alloc)
    , extended_fingers(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::leap_motion_controller::Hand_<ContainerAllocator>  _left_hand_type;
  _left_hand_type left_hand;

   typedef  ::leap_motion_controller::Hand_<ContainerAllocator>  _right_hand_type;
  _right_hand_type right_hand;

   typedef uint8_t _extended_fingers_type;
  _extended_fingers_type extended_fingers;





  typedef boost::shared_ptr< ::leap_motion_controller::Set_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion_controller::Set_<ContainerAllocator> const> ConstPtr;

}; // struct Set_

typedef ::leap_motion_controller::Set_<std::allocator<void> > Set;

typedef boost::shared_ptr< ::leap_motion_controller::Set > SetPtr;
typedef boost::shared_ptr< ::leap_motion_controller::Set const> SetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion_controller::Set_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion_controller::Set_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion_controller::Set_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Set_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.left_hand == rhs.left_hand &&
    lhs.right_hand == rhs.right_hand &&
    lhs.extended_fingers == rhs.extended_fingers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion_controller::Set_<ContainerAllocator1> & lhs, const ::leap_motion_controller::Set_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Set_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion_controller::Set_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Set_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion_controller::Set_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Set_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion_controller::Set_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion_controller::Set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1f63767b76560dd9b983103a3c6a895";
  }

  static const char* value(const ::leap_motion_controller::Set_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1f63767b76560ddULL;
  static const uint64_t static_value2 = 0x9b983103a3c6a895ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion_controller::Set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion_controller/Set";
  }

  static const char* value(const ::leap_motion_controller::Set_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion_controller::Set_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# For position, Leap Motion Controller uses '_optical' axis orientation, i.e.:\n"
"#    z forward\n"
"#    x right\n"
"#    y down\n"
"\n"
"std_msgs/Header header\n"
"\n"
"leap_motion_controller/Hand left_hand\n"
"\n"
"leap_motion_controller/Hand right_hand\n"
"\n"
"uint8 extended_fingers\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: leap_motion_controller/Hand\n"
"# For position, Leap Motion Controller uses '_optical' axis orientation, i.e.:\n"
"#    z forward\n"
"#    x right\n"
"#    y down\n"
"\n"
"bool is_present					# TRUE if this hand is a valid hand (left or right), FALSE otherwise.\n"
"geometry_msgs/PoseStamped palm_pose		# Contains the center position of the palm in meters from the Leap Motion Controller origin and the quaternion orientation of the palm.\n"
"geometry_msgs/Vector3Stamped palm_velocity	# The rate of change of the palm position in meters per second. \n"
"float32 sphere_radius				# The radius of a sphere fit to the curvature of this hand. This sphere is placed roughly as if the hand were holding a ball. Thus the size of the sphere decreases as the fingers are curled into a fist.\n"
"float32 pinch_strength				# The strength is zero for an open hand, and blends to 1.0 when a pinching hand pose is recognized.\n"
"bool key_tap					# TRUE if KEY_TAP gesture has been detected on this hand, FALSE otherwise.\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3Stamped\n"
"# This represents a Vector3 with reference coordinate frame and timestamp\n"
"Header header\n"
"Vector3 vector\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::leap_motion_controller::Set_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion_controller::Set_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.left_hand);
      stream.next(m.right_hand);
      stream.next(m.extended_fingers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Set_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion_controller::Set_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion_controller::Set_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_hand: ";
    s << std::endl;
    Printer< ::leap_motion_controller::Hand_<ContainerAllocator> >::stream(s, indent + "  ", v.left_hand);
    s << indent << "right_hand: ";
    s << std::endl;
    Printer< ::leap_motion_controller::Hand_<ContainerAllocator> >::stream(s, indent + "  ", v.right_hand);
    s << indent << "extended_fingers: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.extended_fingers);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_CONTROLLER_MESSAGE_SET_H
