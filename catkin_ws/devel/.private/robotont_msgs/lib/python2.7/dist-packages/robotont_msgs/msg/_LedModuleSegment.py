# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robotont_msgs/LedModuleSegment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import robotont_msgs.msg

class LedModuleSegment(genpy.Message):
  _md5sum = "074116e38328a837ef6928799ed4707a"
  _type = "robotont_msgs/LedModuleSegment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 idx_start
robotont_msgs/ColorRGB[] colors

================================================================================
MSG: robotont_msgs/ColorRGB
#Red, Green, Blue intensities in range of 0-255.
uint8 r
uint8 g
uint8 b
"""
  __slots__ = ['idx_start','colors']
  _slot_types = ['uint32','robotont_msgs/ColorRGB[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       idx_start,colors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LedModuleSegment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.idx_start is None:
        self.idx_start = 0
      if self.colors is None:
        self.colors = []
    else:
      self.idx_start = 0
      self.colors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.idx_start
      buff.write(_get_struct_I().pack(_x))
      length = len(self.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.colors:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.r, _x.g, _x.b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.colors is None:
        self.colors = None
      end = 0
      start = end
      end += 4
      (self.idx_start,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.colors = []
      for i in range(0, length):
        val1 = robotont_msgs.msg.ColorRGB()
        _x = val1
        start = end
        end += 3
        (_x.r, _x.g, _x.b,) = _get_struct_3B().unpack(str[start:end])
        self.colors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.idx_start
      buff.write(_get_struct_I().pack(_x))
      length = len(self.colors)
      buff.write(_struct_I.pack(length))
      for val1 in self.colors:
        _x = val1
        buff.write(_get_struct_3B().pack(_x.r, _x.g, _x.b))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.colors is None:
        self.colors = None
      end = 0
      start = end
      end += 4
      (self.idx_start,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.colors = []
      for i in range(0, length):
        val1 = robotont_msgs.msg.ColorRGB()
        _x = val1
        start = end
        end += 3
        (_x.r, _x.g, _x.b,) = _get_struct_3B().unpack(str[start:end])
        self.colors.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
