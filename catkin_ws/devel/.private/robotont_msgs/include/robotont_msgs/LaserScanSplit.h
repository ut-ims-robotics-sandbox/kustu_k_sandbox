// Generated by gencpp from file robotont_msgs/LaserScanSplit.msg
// DO NOT EDIT!


#ifndef ROBOTONT_MSGS_MESSAGE_LASERSCANSPLIT_H
#define ROBOTONT_MSGS_MESSAGE_LASERSCANSPLIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotont_msgs
{
template <class ContainerAllocator>
struct LaserScanSplit_
{
  typedef LaserScanSplit_<ContainerAllocator> Type;

  LaserScanSplit_()
    : stamp()
    , leftMin(0.0)
    , centerMin(0.0)
    , rightMin(0.0)
    , leftMean(0.0)
    , centerMean(0.0)
    , rightMean(0.0)  {
    }
  LaserScanSplit_(const ContainerAllocator& _alloc)
    : stamp()
    , leftMin(0.0)
    , centerMin(0.0)
    , rightMin(0.0)
    , leftMean(0.0)
    , centerMean(0.0)
    , rightMean(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _leftMin_type;
  _leftMin_type leftMin;

   typedef double _centerMin_type;
  _centerMin_type centerMin;

   typedef double _rightMin_type;
  _rightMin_type rightMin;

   typedef double _leftMean_type;
  _leftMean_type leftMean;

   typedef double _centerMean_type;
  _centerMean_type centerMean;

   typedef double _rightMean_type;
  _rightMean_type rightMean;





  typedef boost::shared_ptr< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> const> ConstPtr;

}; // struct LaserScanSplit_

typedef ::robotont_msgs::LaserScanSplit_<std::allocator<void> > LaserScanSplit;

typedef boost::shared_ptr< ::robotont_msgs::LaserScanSplit > LaserScanSplitPtr;
typedef boost::shared_ptr< ::robotont_msgs::LaserScanSplit const> LaserScanSplitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotont_msgs::LaserScanSplit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotont_msgs::LaserScanSplit_<ContainerAllocator1> & lhs, const ::robotont_msgs::LaserScanSplit_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.leftMin == rhs.leftMin &&
    lhs.centerMin == rhs.centerMin &&
    lhs.rightMin == rhs.rightMin &&
    lhs.leftMean == rhs.leftMean &&
    lhs.centerMean == rhs.centerMean &&
    lhs.rightMean == rhs.rightMean;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotont_msgs::LaserScanSplit_<ContainerAllocator1> & lhs, const ::robotont_msgs::LaserScanSplit_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotont_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8be98bfd4e98a5f589a43bafb13b609";
  }

  static const char* value(const ::robotont_msgs::LaserScanSplit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8be98bfd4e98a5fULL;
  static const uint64_t static_value2 = 0x589a43bafb13b609ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotont_msgs/LaserScanSplit";
  }

  static const char* value(const ::robotont_msgs::LaserScanSplit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#This msg defines a message for dividing laserscan into 3 separate distances\n"
"#It provides mean and minimum values for the three sectors.\n"
"\n"
"time stamp\n"
"\n"
"float64 leftMin\n"
"float64 centerMin\n"
"float64 rightMin\n"
"\n"
"float64 leftMean\n"
"float64 centerMean\n"
"float64 rightMean\n"
;
  }

  static const char* value(const ::robotont_msgs::LaserScanSplit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.leftMin);
      stream.next(m.centerMin);
      stream.next(m.rightMin);
      stream.next(m.leftMean);
      stream.next(m.centerMean);
      stream.next(m.rightMean);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserScanSplit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotont_msgs::LaserScanSplit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotont_msgs::LaserScanSplit_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "leftMin: ";
    Printer<double>::stream(s, indent + "  ", v.leftMin);
    s << indent << "centerMin: ";
    Printer<double>::stream(s, indent + "  ", v.centerMin);
    s << indent << "rightMin: ";
    Printer<double>::stream(s, indent + "  ", v.rightMin);
    s << indent << "leftMean: ";
    Printer<double>::stream(s, indent + "  ", v.leftMean);
    s << indent << "centerMean: ";
    Printer<double>::stream(s, indent + "  ", v.centerMean);
    s << indent << "rightMean: ";
    Printer<double>::stream(s, indent + "  ", v.rightMean);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTONT_MSGS_MESSAGE_LASERSCANSPLIT_H
